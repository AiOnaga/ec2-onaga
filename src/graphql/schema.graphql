"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")"Indicates what fields are available at the top level of a query operation."type Query {    viewer: Viewer @auth    profile: Profile @find    post(id: Int! @eq): Post @field(resolver: "App\\GraphQL\\Queries\\Post")    postsByUser(userId: Int!): [Post] @paginate(defaultCount: 10)    postsByCategory(id: Int!): [Post] @paginate(defaultCount: 10)    postByBookmark(userId:Int!): [Post] @paginate(defaultCount: 10)    comment(id: Int! @eq): Comment! @find    comments : [Comment]@all    commentByPost(postId: Int!): [Comment] @paginate(defaultCount: 10)    category(id: Int!): Category! @find    allCategories: [Category] @paginate(defaultCount: 10)    followings(userId: Int!): [Profile] @find    followers(userId: Int!): [Profile] @find    likeCount(userId: Int!): Int! @find    likeViewerList(userId: Int!):Int @find    "おすすめ記事をランダムでとっていくる"    postByRecommend: [Post] @paginate(type: SIMPLE,defaultCount: 10)}type Mutation {    createPost(input: createPostInput!): Post @create    editPost(input: editPostInput!): Post @update    deletePost(id: Int! @whereKey): Post @delete}"観覧者"type Viewer{    id: Int    "名前"    name: String!    "メールアドレス"    email: String!    "プロフィール"    profile: Profile!}"プロフィール"type Profile{    "ニックネーム"    nickName: String!    "アイコンURL"    iconUrl:String    "紹介文"    discription: String}"記事"type Post{    id: Int    "タイトル"    title: String!    "本文"    content: String!    "投稿画像"    postImage: PostImage    "作成日"    created_at: DateTime!    "更新日"    updated_at: DateTime!    "コメント"    comments: [Comment] @hasMany(relation: "comments")    "投稿主情報"    author: Profile! @belongsTo(relation: "user")    "カテゴリー"    categories: [Category!]!    "お気に入り数"    bookmarkCount: Int    "いいね数"    likeCount: Int}type PostImage{    id: Int!    url: String!    altText: String}"コメント"type Comment{    id: Int    "ユーザーID"    userId: Int!    "記事ID"    postId: Int!    "投稿主情報"    author: Profile!    "コメント"    text: String! @rename(attribute: "content")    "作成日"    created_at: DateTime!    "更新日"    updated_at: DateTime!}type Category{    id: Int    "カテゴリ名"    categoryName: String!    "作成日"    created_at: DateTime!    "更新日"    updated_at: DateTime!}input createViewerInput{    "名前"    name: String!    "メールアドレス"    email: String!    "プロフィール"    profile: createProfileInput!}input createProfileInput{    "ユーザーID"    userId: Int!    "ニックネーム"    nickName: String!    "アイコンURL"    iconUrl:String    "紹介文"    discription: String}input createPostInput{    title: String!    text: String!    postImage: String}input editPostInput{    title: String    text: String    postImage: String}#"Account of a person who utilizes this application."#type User {#    "Unique primary key."#    id: ID!##    "Non-unique name."#    name: String!##    "Unique email address."#    email: String!##    "When the email was verified."#    email_verified_at: DateTime##    "When the account was created."#    created_at: DateTime!##    "When the account was last updated."#    updated_at: DateTime!#}